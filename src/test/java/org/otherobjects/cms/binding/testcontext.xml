<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-2.5.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-2.5.xsd">

	<context:annotation-config />

	<bean name="singletonBeanLocator" class="org.otherobjects.cms.SingletonBeanLocator" />

	<bean id="annotatedClassesScanner" class="org.otherobjects.cms.discovery.AnnotatedClassesScannerImpl" />

	<!-- For properties -->
	<bean id="otherObjectsConfigurator" class="org.otherobjects.cms.test.TestOtherObjectsConfigurator">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:otherobjects.resources/config/otherobjects.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="ooResourceLoader" class="org.otherobjects.cms.io.OoResourceLoader">
	</bean>

	<!-- JNDI DataSource for J2EE environments -->
	<!--<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/appfuse"/>-->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="100" />
		<property name="maxIdle" value="30" />
		<property name="maxWait" value="1000" />
		<property name="defaultAutoCommit" value="true" />
		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="60" />
	</bean>

	<!-- registers OoResourceEditor to enable OoResourcePaths specified in the application context to be automatically resolved to OoResource objects -->
	<bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
		<property name="customEditors">
			<map>
				<entry key="org.otherobjects.cms.io.OoResource">
					<bean class="org.otherobjects.cms.io.OoResourceEditor">
						<property name="ooResourceLoader" ref="ooResourceLoader" />
					</bean>
				</entry>
			</map>
		</property>
	</bean>

	<!-- Repository -->
	<bean id="repository" class="org.springmodules.jcr.jackrabbit.RepositoryFactoryBean">
		<property name="configuration" value="${jcr.config.path}" />
		<property name="homeDir" value="${jcr.repository.location}" />
	</bean>

	<bean id="jcrSessionFactory" class="org.otherobjects.cms.jcr.OtherObjectsJackrabbitSessionFactory">
		<property name="repository" ref="repository" />
		<property name="credentials">
			<bean class="javax.jcr.SimpleCredentials">
				<constructor-arg index="0" value="${jcr.username}" />
				<constructor-arg index="1">
					<bean factory-bean="password" factory-method="toCharArray" />
				</constructor-arg>
			</bean>
		</property>
	</bean>

	<bean id="password" class="java.lang.String">
		<constructor-arg index="0" value="${jcr.password}" />
	</bean>

	<!-- Transaction support  -->
	<bean id="jcrTransactionManager" class="org.springmodules.jcr.jackrabbit.LocalTransactionManager">
		<property name="sessionFactory" ref="jcrSessionFactory" />
	</bean>

	<bean id="baseTransactionProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" abstract="true">
		<property name="transactionManager" ref="jcrTransactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>

	<!-- Mapping -->
	<bean id="jcrMappingDescriptor" class="org.otherobjects.cms.jcr.TypeServiceMapperImpl">
		<constructor-arg index="0" value="classpath:otherobjects.resources/config/jcr-mapping.xml" />
		<property name="typeService" ref="typeService" />
	</bean>

	<bean id="jcrMappingTemplate" class="org.springmodules.jcr.jackrabbit.ocm.JcrMappingTemplate">
		<constructor-arg index="0" ref="jcrSessionFactory" />
		<constructor-arg index="1" ref="jcrMappingDescriptor" />
		<!-- TODO Is is wise to allow create here? -->
		<property name="allowCreate" value="true" />
	</bean>

	<!-- DAOs -->
	<bean id="universalJcrDao" parent="baseTransactionProxy">
		<property name="target">
			<bean class="org.otherobjects.cms.dao.UniversalJcrDaoJackrabbit">
				<property name="jcrMappingTemplate" ref="jcrMappingTemplate" />
				<property name="typeService" ref="typeService" />
				<property name="sessionFactory" ref="jcrSessionFactory" />
				<property name="validator" ref="baseNodeValidator" />
			</bean>
		</property>
	</bean>
	
	<!-- Types -->
	<bean name="typeService" class="org.otherobjects.cms.types.TypeServiceImpl">
		<property name="annotationBasedTypeDefBuilder" ref="annotationBasedTypeDefBuilder"></property>
		<property name="otherObjectsConfigurator" ref="otherObjectsConfigurator" />
		<property name="scanner" ref="annotatedClassesScanner" />
	</bean>
	
	<bean id="annotationBasedTypeDefBuilder" class="org.otherobjects.cms.types.AnnotationBasedTypeDefBuilder" />
	
	<bean id="baseNodeValidator" class="org.otherobjects.cms.validation.BaseNodeValidator">
		<property name="typeService" ref="typeService" /> <!-- this shouldn't be neccessary - but as soon as baseNodeValidator is referenced in universalJcrDao the auto config with @Resource stops working -->
	</bean>
	
	<bean name="daoService" class="org.otherobjects.cms.dao.DaoServiceImpl">
	</bean>
	
	<!-- Bootstrap -->
<!--	<bean name="jackrabbitSetupUtils" class="org.otherobjects.cms.util.DataStoreSetupUtils" init-method="bootstrap">-->
<!--		<property name="sessionFactory" ref="sessionFactory" />-->
<!--		<property name="jcrSessionFactory" ref="jcrSessionFactory" />-->
<!--		<property name="nodeTypesConfig" value="classpath:otherobjects.resources/config/node-types.cnd" />-->
<!--	</bean>-->
<!---->
<!--	<bean name="ooBootstrapUtils" class="org.otherobjects.cms.util.OtherObjectsBootstrapUtils" init-method="bootstrap">-->
<!--		<property name="bootstrapScript" value="classpath:otherobjects.resources/bootstrap-data/setup.script" />-->
<!--		<property name="userDao" ref="userDao" />-->
<!--		<property name="roleDao" ref="roleDao" />-->
<!--		<property name="universalJcrDao" ref="universalJcrDao" />-->
<!--	</bean>-->
</beans>
