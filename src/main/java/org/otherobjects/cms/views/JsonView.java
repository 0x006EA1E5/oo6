package org.otherobjects.cms.views;import java.io.PrintWriter;import java.io.StringWriter;import java.util.List;import java.util.Locale;import java.util.Map;import java.util.regex.Matcher;import java.util.regex.Pattern;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.otherobjects.cms.SingletonBeanLocator;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.context.MessageSource;import org.springframework.web.servlet.support.RequestContext;import org.springframework.web.servlet.view.AbstractView;import flexjson.JSONSerializer;public class JsonView extends AbstractView{    //TODO Make this configurable?    private static final String ENCODING = "UTF-8";    private final Logger logger = LoggerFactory.getLogger(JsonView.class);    public String getContentType()    {        return "application/json";    }    @SuppressWarnings("unchecked")    @Override    protected void renderMergedOutputModel(Map model, HttpServletRequest request, HttpServletResponse response) throws Exception    {        PrintWriter output = response.getWriter();        StringWriter writer = new StringWriter();        JSONSerializer serializer = new JSONSerializer();        if (model.get("data") instanceof List)        {            writer.write(serializer.serialize(model.get("data")));        }        else if (model.containsKey("json"))        {            if (model.containsKey("jsonIncludes"))                serializer = serializer.include((String[]) model.get("jsonIncludes"));            writer.write(serializer.serialize(model.get("json")));        }        else        {            writer.write(serializer.serialize(model));        }        String json = writer.toString();        // FIXME Is this a good idea or even a good place?        RequestContext requestContext = new RequestContext(request);        MessageSource messageSource = (MessageSource) SingletonBeanLocator.getBean("messageSource");        json = localiseString(json, messageSource, requestContext.getLocale());        // FIXME Is there a more performant way of doing this        logger.debug(json);        response.setCharacterEncoding(ENCODING);        output.write(json);    }    protected String localiseString(String text, MessageSource messageSource, Locale locale)    {        Pattern p = Pattern.compile("\\$\\{([\\w\\.]*)\\}");        Matcher m = p.matcher(text);        StringBuffer sb = new StringBuffer();        while (m.find())        {            String msg = messageSource.getMessage(m.group(1), null, locale);            m.appendReplacement(sb, msg);        }        m.appendTail(sb);        return sb.toString();    }}