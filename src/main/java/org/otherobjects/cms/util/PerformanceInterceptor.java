package org.otherobjects.cms.util;import org.aspectj.lang.ProceedingJoinPoint;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class PerformanceInterceptor{    private final Logger logger = LoggerFactory.getLogger(PerformanceInterceptor.class);    private PerformanceInfo performanceInfo;    public Object log(ProceedingJoinPoint call) throws Throwable    {        long start = System.currentTimeMillis();        try        {            Object result = call.proceed();            return result;        }        finally        {            try            {                long end = System.currentTimeMillis();                long timeMs = end - start;                performanceInfo.registerEvent(PerformanceInfo.JCR, call.getSignature().getName() + "(" + call.getArgs()[0] + ")", timeMs);                this.logger.debug("Method: {} ({}) took: {}ms.", new Object[]{call.toShortString(), call.getArgs()[0], timeMs});            }            catch (RuntimeException e)            {                /*                  * FIXME This is a dirty hack to stop errors when no request is in progress.                 * Need a better way of only intercepting during requests.                 */            }        }    }    public void setPerformanceInfo(PerformanceInfo performanceInfo)    {        this.performanceInfo = performanceInfo;    }    public PerformanceInfo getPerformanceInfo()    {        return performanceInfo;    }}