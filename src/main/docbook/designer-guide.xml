<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3CR3//EN"
"http://www.oasis-open.org/docbook/xml/4.3CR3/docbookx.dtd">
<book lang="en">
  <bookinfo>
    <title>OTHERobjects CMS</title>

    <subtitle>Site Designer Guide</subtitle>

    <releaseinfo>0.3</releaseinfo>
  </bookinfo>

  <toc></toc>

  <preface id="preface">
    <title>Preface</title>

    <section id="section-why-another-framework">
      <title>Who is this guide for?</title>

      <para>This guide is for users who wish to build their own website. It
      covers installing and running OTHERobjects, configuring data types and
      building templates and adding action logic to events and scheduled
      tasks.</para>

      <para>For information on adding content and maintaining an existing site
      please see the User Guide.</para>

      <para>Move advanced users wishing to extend OTHERobjects should read the
      Developer Guide.</para>

      <para>You should be comfortable with the command line, HTML, and simple
      scripting.</para>

      <para>You don't need any knowledge of Java.</para>
    </section>
  </preface>

  <chapter id="chapter-using-the-framework">
    <title>Getting started</title>

    <para>TODO Setting up admin user (for more info see Users and permissions
    chapter).</para>

    <section>
      <title>Installing required software</title>

      <para>There is some key software that you will need before you can start
      developing with OTHERobjects.</para>

      <section>
        <title>Java</title>

        <para>OTHERobjects is Java-powered, so you will need a recent version
        of the JVM to run it. If your system does not come with a JVM
        installed we would recommend the latest Sun JDK from
        java.sun.com/download. Check that your JVM is installed by running:
        the following command:</para>

        <programlisting>iMac:~ rich$ <emphasis role="bold">java -version</emphasis>
java version "1.5.0_07" 
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_07-164)
Java HotSpot(TM) Client VM (build 1.5.0_07-87, mixed mode, sharing)
iMac:~ rich$
</programlisting>

        <para>You will need version 1.5.0 or greater.</para>
      </section>

      <section>
        <title>Apache Maven</title>

        <para>We use Maven behing the scenes to download dependecies, run the
        development server and to backage up your site ready for deployment.
        You'll need Apache Maven version 2.0.7 or greater. You can download it
        from: <uri>http://maven.apache.org/download.html</uri> . Once you have
        downloaded and installed Maven you should make sure that the <emphasis
        role="bold">mvn</emphasis> command is included in your path:</para>

        <para><programlisting>iMac:~ rich$ <emphasis role="bold">mvn -version</emphasis> 
Maven version: 2.0.7
iMac:~ rich$
</programlisting></para>

        <para>Also set MAVEN_OPTS="-Xms128M -Xmx256M
        -Djava.awt.headless=true"</para>
      </section>
    </section>

    <section>
      <title>Installing OTHERobjects</title>

      <para>Download from http://www.otherobjects.org/download/</para>

      <para>Unzip the file somewhere on your system.</para>

      <para>Set the OTHEROBJECTS_HOME environment variable.</para>

      <para>Add $OTHEROBJECTS_HOME/bin to your path.</para>

      <section>
        <title>Creating your first site</title>

        <para>If all your software has been properly installed then you should
        be ready to create your first site.</para>

        <para>First of all check that OTHERobjects has been installed:</para>

        <programlisting>iMac:mysite rich$ <emphasis role="bold">oo version</emphasis>

OTHERObjects CMS v0.5-SNAPSHOT

Maven version: 2.0.9
Java version: 1.5.0_13
OS name: "mac os x" version: "10.5.3" arch: "i386" Family: "unix"

iMac:mysite rich$ 
</programlisting>

        <para>If you get any errors check the required software has been
        correctly installed.</para>

        <para>Now go ahead and create your first site:</para>

        <para><programlisting>iMac:mysite rich$ <emphasis role="bold">oo create demo</emphasis>

...

Your new site has been created. To start it up type:

  cd oo2
  oo run
</programlisting></para>

        <para>Finally (as told by the create task) change into your new
        directory and type <emphasis role="bold">oo run</emphasis>. The server
        will start and you should get this:</para>

        <programlisting>INFO  [o.o.cms.util.StartupMessage] ************************************************************** 
INFO  [o.o.cms.util.StartupMessage] ************************************************************** 
INFO  [o.o.cms.util.StartupMessage]   ___ _____ _   _ _____ ____       _     _           _        
INFO  [o.o.cms.util.StartupMessage]  / _ \_   _| | | | ____|  _ \ ___ | |__ (_) ___  ___| |_ ___  
INFO  [o.o.cms.util.StartupMessage] | | | || | | |_| |  _| | |_) / _ \| '_ \| |/ _ \/ __| __/ __| 
INFO  [o.o.cms.util.StartupMessage] | |_| || | |  _  | |___|  _ &lt; (_) | |_) | |  __/ (__| |_\__ \ 
INFO  [o.o.cms.util.StartupMessage]  \___/ |_| |_| |_|_____|_| \_\___/|_.__// |\___|\___|\__|___/ 
INFO  [o.o.cms.util.StartupMessage]                                       |__/                 
INFO  [o.o.cms.util.StartupMessage]  
INFO  [o.o.cms.util.StartupMessage] ******************* Started up successfully ****************** 
INFO  [o.o.cms.util.StartupMessage]  
INFO  [o.o.cms.util.StartupMessage] Environment : dev 
INFO  [o.o.cms.util.StartupMessage] Site        : [unknown] 
INFO  [o.o.cms.util.StartupMessage] Admin       : [unknown] 
INFO  [o.o.cms.util.StartupMessage]  
INFO  [o.o.cms.util.StartupMessage] ************************************************************** 
INFO  [o.o.cms.util.StartupMessage] ************************************************************** 
</programlisting>

        <para>Congratulations! Your site has started up correctly and you can
        now go to http://localhost:8080/ to see your first page.</para>
      </section>
    </section>
  </chapter>

  <chapter>
    <title>Where does the data go?</title>

    <para>OTHERobjects sites use Maven under the hood to manage a variety of
    build functions. The standard maven directory layout
    (http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html)
    is quite deep and unnecessray for most OO projects. Our standard layout is
    described below:.</para>

    <para></para>

    <para></para>

    <para>As you build you site you will be adding all sorts of code and data.
    It is obviously important to keep this safe.</para>

    <para>Templates and type definitions</para>

    <para>Assets: JS, CSS, graphics</para>

    <para>Scripts</para>

    <para>Site data: added data, UGC, uploaded files</para>

    <section>
      <title>What to back up</title>

      <para></para>

      <para></para>
    </section>

    <section>
      <title>Using SCM</title>

      <para>SVN, CVS, Git</para>

      <para>When checking in to SCM ignore the private-data and public-data
      folders</para>
    </section>
  </chapter>

  <chapter id="chapter-overview-of-steps">
    <title>Overview of steps involved to build a site</title>

    <para>There are a couple of steps that you will need to go through each
    tme you build a site with OTHERobjects. We will very briefly go over these
    here to give you an idea of what's involved.</para>

    <itemizedlist>
      <listitem>
        <para>First you will need to think about the various different types
        (or objects if you are coming from a programming background) you will
        need in your site. Obvious ones that almost all sites will need are
        articles and news items. But there might also be things like jobs,
        events, products, press releases to name but a few.</para>
      </listitem>

      <listitem>
        <para>Then you will need to define those in a file called
        src/main/resources/site.resources/bootstrap-data/jcr-data-types.xml in
        your sites project folder. Have a look at that file and its sibling in
        the OTHERobjects project folder in
        src/main/resources/otherobjects.resources/bootstrap-data/jcr-data-types.xml
        to get a feeling on what that involves. We might add a type designer
        in the wrokbench in the future to do that.</para>
      </listitem>

      <listitem>
        <para>Then log in to the workbench and create the overall folder
        structure of your site (at least the first level).</para>
      </listitem>

      <listitem>
        <para>Then create at least one layout file in
        src/main/resources/site.resources/templates/layouts. Create a
        corresponding entry in the workbench in Designer &gt; Layouts giving
        the filename (without the path) as the content of the 'Code' field. A
        layout is the main document making up your site's html documents. It
        contains the Doctype and HTML head and body sections and controls the
        overall layout of your sites pages (as the name implies). You can have
        as many layout files as you want but it is advisable to keep the
        number down. A useful scheme that has evolved over time is to have one
        layout for the home page, one for the subfolder index listing pages
        and one for all other content pages.</para>
      </listitem>

      <listitem>
        <para>Then create a block for at least one of your types in
        src/main/resources/site.resources/templates/blocks. A block is a mini
        template that controls with what markup the properties of your types
        are inserted into the site pages. It can also contain simple content
        logic, like list the 5 latest news items etc.</para>
      </listitem>

      <listitem>
        <para>Now that you have types and layouts and blocks you can create
        templates (Designer &gt; Templates). A template wires together blocks
        and layouts by specifying which blocks go into which designated
        regions in a layout in what order.</para>
      </listitem>

      <listitem>
        <para>Now when you create any of your types by going to a folder
        listing and choosing 'Add Object' you can choose from the template(s)
        you created and whatever template you choose is then used to view (and
        preview) that type.</para>
      </listitem>
    </itemizedlist>
  </chapter>

  <chapter>
    <title>Defining object types</title>

    <para>All of the data for your site is stored in objects. A number of
    standard objects are provided for Images, Files, Articles, News Stories
    and such. You will more than likely want to customise these and add your
    own object types too. This is easy to do and this section explains how it
    is done.</para>

    <para>Note for advanced users: This section only covers live editing of
    dynamic object types. For more advanced use cases you may want to create
    real Java object to store and process your data. You can also choose to
    store data in the database rather than the content repository. More
    informatino about these options can be found in the developer
    guide.</para>

    <para></para>

    <para>TypeDef must have: name</para>

    <para>Properties much have: name, type, size?</para>

    <para>Choose a base object ie is it a page or not.</para>

    <para>Conventions: page objects have title, content, summary (for
    elsewhere), image</para>

    <para>Sholud name always end in Page? EventPage?</para>

    <section>
      <title>How to edit and define objects</title>

      <para>Go to Workbench &gt; Data Types &gt; Add or Edit</para>

      <para>Type Def options</para>

      <para></para>

      <table>
        <title>Options for an Object Type Definition</title>

        <tgroup cols="2">
          <tbody>
            <row>
              <entry>code</entry>

              <entry>a unique code for this type. Use your domain name for
              namespace. Required</entry>
            </row>

            <row>
              <entry>label</entry>

              <entry>human readable label</entry>
            </row>

            <row>
              <entry>description</entry>

              <entry>a more complete description of this object type</entry>
            </row>

            <row>
              <entry>help</entry>

              <entry>instructions for users using this object type</entry>
            </row>

            <row>
              <entry>labelProperty</entry>

              <entry>which property to use to descripe this object</entry>
            </row>

            <row>
              <entry>descriptionProperty</entry>
            </row>

            <row>
              <entry>iconProperty</entry>
            </row>

            <row>
              <entry>imageProperty</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Property Types</para>

      <para>Simple Properties: string, text, number, decimal, boolean, date,
      time, timestamp</para>

      <para>Sub objects: reference, component</para>

      <para>Collection types: list</para>

      <para></para>

      <para>Common objects you may want to reference: CmsImage, CmsFile,
      OoResource?, CmsRichMedia, User, Role</para>
    </section>

    <section>
      <title>Forms, fields and validation</title>

      <para>Each property has a standard field type, but alternate
      implementations may be available</para>

      <para></para>

      <table>
        <title>Properties and avaiable field types</title>

        <tgroup cols="2">
          <tbody>
            <row>
              <entry>string</entry>

              <entry>text field, password field, picklist</entry>
            </row>

            <row>
              <entry>text</entry>

              <entry>textarea, wikieditor, htmleditor</entry>
            </row>

            <row>
              <entry>date</entry>

              <entry>calendar</entry>
            </row>

            <row>
              <entry>time</entry>

              <entry>time selector</entry>
            </row>

            <row>
              <entry>timestamp</entry>

              <entry>calendar and time selector</entry>
            </row>

            <row>
              <entry>boolean</entry>

              <entry>checkbox, radiobuttons, slider</entry>
            </row>

            <row>
              <entry>number, decimal</entry>

              <entry>textfeld, slider, pick list</entry>
            </row>

            <row>
              <entry></entry>

              <entry></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </chapter>

  <chapter>
    <title>Writing templates</title>

    <para>Template paths</para>

    <para>Reserved folder names: otherobjects, plugins</para>

    <para></para>

    <section>
      <title>Standard data</title>

      <para>resourceObject (via SiteController only)</para>

      <para>folder (via SiteController only)</para>

      <para>url ?</para>
    </section>

    <section>
      <title>Loading additional data</title>

      <para>daoService</para>

      <para>selectors</para>
    </section>

    <section>
      <title>Linking to pages and assets</title>

      <para>PAges</para>

      <para>CSS/JS</para>

      <para>static</para>

      <para>data</para>

      <para>external (think about scheme htty/https)</para>
    </section>

    <section>
      <title>Acesssing parameters, session and cookie data</title>

      <para>${RequestParameters.pageNo}</para>

      <para>${Request}</para>

      <para>${Application}</para>

      <para>${Session}</para>
    </section>

    <section>
      <title>Messages</title>

      <para>spring.message</para>

      <para>store in messages.properties</para>
    </section>

    <section>
      <title>Formatting and converting content</title>

      <para>date</para>

      <para>boolean</para>

      <para>decimal</para>
    </section>

    <section>
      <title>Security</title>

      <para>Show current user details: security.user</para>

      <para>Test if user has role: security.athorize ifAllGranted</para>
    </section>

    <section>
      <title>Forms</title>

      <para></para>
    </section>

    <section>
      <title>XSS</title>

      <para>ALways use ?html on strings from user input.</para>

      <para>Working on a way for this to happen automatically.</para>
    </section>

    <section>
      <title>Layouts</title>

      <para>Must include</para>

      <para>oo-hud</para>

      <para>oo-flash</para>
    </section>
  </chapter>

  <chapter>
    <title>Writing actions</title>

    <para>Actions update the model.</para>

    <para>Can be written in Groovy or Java.</para>

    <para>Put in /webapp/WEB-INF/scripts/</para>

    <para>Called via url /_action/ActionName</para>

    <para>Must be posted to.</para>

    <para>Must redirect on completion.</para>

    <para>What is available in the binding?</para>

    <para>Flash message support.</para>

    <para>Redirects</para>

    <para>Form handling</para>

    <para></para>
  </chapter>

  <chapter>
    <title>Understanding paths</title>

    <para>With resources spread across multiple projects (your site,
    OTHERobjects and your plugins), potentially across multiple servers (a
    static server or external data server) and running in different
    environments (development, staging and production) it can become very
    difficult to handle paths.</para>

    <para>We aim to simplify this by having a single path naming convention
    for all resources which is then resolved to the correct locations.</para>

    <para>What you need from a Resource:</para>

    <para>internalPath -- unique path reference that remains constant</para>

    <para>filePath -- path of the file on disk (if appropriate)</para>

    <para>externalUrl -- externally accessible URL (if appropriate)</para>

    <para>inputStream -- for reading data (guaranteed to always work)</para>

    <para>outputSteram -- for writing data (if appropraite)</para>

    <para>In addition, specfic resources may have their own addtional
    paths.</para>

    <para>Internal path format:</para>

    <para>/module/type/resource.ext</para>

    <para>/site/static/image.png</para>

    <para>/otherobjects/template/header.ftl</para>

    <para>/site/data/uploaded-image-123.jpg</para>

    <para>/plugins/polls/static/graph.png</para>

    <para>Note if the path represents a directory it MUST end with a
    slash.</para>

    <para>The site URL structure is crucial to help you users gain a mental
    model of your site hierarchy. You can generally use any folder name but a
    few top level folders are reserved.</para>

    <para>otherobjects -- main interface</para>

    <para>static -- static files when served on local server (reserved even
    when not)</para>

    <para>data -- data files when served locally</para>

    <para>plugins -- reseved for plugins</para>

    <para>debug -- diagnostics information</para>
  </chapter>

  <chapter>
    <title>Handling errors</title>

    <para>There are 3 key error situations that you will need to handle on
    your site:</para>

    <para>404 Not found (page has moved or URL typed incorrectly)</para>

    <para>- content managed page if this is missing default to 500)</para>

    <para>500 Internal Server Error (something bad in template or code)</para>

    <para>401 Unathorised User is unathorised (doesn't have correct
    permissions to access resource or execute code)</para>

    <para></para>
  </chapter>

  <chapter>
    <title>Defining custom template directives / tools</title>

    <para>Replacement for tools in OO. Can be done in macros or in Java.
    Groovy too?</para>

    <para>http://freemarker.sourceforge.net/docs/dgui_misc_userdefdir.html</para>
  </chapter>

  <chapter>
    <title>Users and permissions</title>

    <para>How to create a custom user</para>
  </chapter>

  <chapter>
    <title>Scheduling tasks</title>

    <para>How to create scheduled tasks.</para>

    <para>Currently we support two types of scheduled Jobs:</para>

    <itemizedlist>
      <listitem>
        <para>Jobs written in Java</para>
      </listitem>

      <listitem>
        <para>Jobs written in Groovy</para>
      </listitem>
    </itemizedlist>

    <para>Both Job types share the same abstract base class as executor:
    org.otherobjects.cms.scheduler.AbstractSpringQuartzJob whose main purpose
    is to provide some contextual setup extracted from the JobExecutionContext
    and to setup security so as to not run these jobs without any security
    context (remember that these jobs are run asynchronously outside of any
    http reqest scope).</para>

    <para>To create a Java job, write a java class extending above mentioned
    AbstractSpringQuartzJob. In your class you can get access to the root web
    application context by calling getApplicationContext(). Then create a
    Scheduled Job in the scheduler folder in workbench and fill in the fully
    qualified class name in the 'Name of job class' field. The job only gets
    added to the scheduler once you publish it.</para>

    <para>To create a groovy job, follow the same steps aas above but instead
    of filling in the 'Name of job class' field, type or paste your script in
    'Groovy script source' field. The script will have access to the root web
    application context via the 'appCtx' variable.</para>

    <para>The jobs are always run under the security context of the user that
    created them.</para>

    <para>How to configuer timings. See:
    http://quartz.sourceforge.net/javadoc/org/quartz/CronTrigger.html</para>
  </chapter>

  <chapter>
    <title>Common features</title>

    <note>
      <para>This may become a separate Patterns Guide.</para>
    </note>

    <para>Print versions</para>

    <para>Text only</para>

    <para>Calendaring</para>

    <para>Commenting</para>

    <para>Header data</para>

    <para>Images and links</para>

    <para>Navigation</para>
  </chapter>

  <chapter>
    <title>Writing tests</title>

    <para>A stable and high-quality website requires thorough testing. All too
    often this testing is on the form "Does this page look sort of right?" or
    "Well It worked for me when I built it so it's OK to go live". Whilst this
    approach will work for very simple sites, as soon as the complexity
    increases there just isn't time to look at every page and try every action
    manually after each change. This in where automated testing comes
    in.</para>

    <para>People who are new to testing often bemoan the amount of time they
    spend writing tests, especially at first when the tools and techniques are
    new and need to be mastered. This, however, is a small price to pay to
    reduce the time spent debugging and fixing broken code. And as the testign
    techniques become more familiar the tests become correspondingly easier to
    write.</para>

    <section>
      <title>What needs testing</title>

      <para>In a word: everything.</para>
    </section>

    <section>
      <title>Testing scripts</title>

      <para></para>
    </section>

    <section>
      <title>Testing templates</title>

      <para></para>
    </section>

    <section>
      <title>Functional testing</title>

      <para></para>
    </section>
  </chapter>

  <chapter>
    <title>Improving performance</title>

    <para>OTHERobjects uses caching at several levels to keep your site
    peforming well even under heavy loads. However, it is important to
    understand how the caching works in order to get the best performance out
    of it.</para>

    <section>
      <title>Understanding caching</title>

      <para></para>
    </section>

    <section>
      <title>Monitoring page performance</title>

      <para>To view the performance characteristics of a page press the Escape
      key. A dialog will appear showing the major events that occured whilst
      building the page and how long they took.</para>

      <figure>
        <title>Performance statistics dialog. Press Escape to show.</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/performance-stats-dialog.png"
                       scale="50" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>TODO Warning indicator on pages with heavy loads eg &gt; 100
      calls, or &gt; 5 seconds.</para>
    </section>
  </chapter>

  <chapter>
    <title>Common problems</title>

    <para>Something already runnign on the port?</para>

    <section>
      <title></title>

      <para></para>
    </section>
  </chapter>

  <chapter>
    <title>Patterns</title>

    <para>Maintenance page: if on static server must ahve link back to main
    site page. Provide esssential details. </para>
  </chapter>
</book>