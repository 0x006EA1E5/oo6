<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3CR3//EN"
"http://www.oasis-open.org/docbook/xml/4.3CR3/docbookx.dtd">
<book lang="en">
  <bookinfo>
    <title>OTHERobjects CMS</title>

    <subtitle>Developer Guide</subtitle>

    <releaseinfo>0.3</releaseinfo>
  </bookinfo>

  <toc></toc>

  <preface id="preface">
    <title>Preface</title>

    <para>This guide is for developers who want to extend the capabilities of
    OTHERobjects beyond what is possible via the web interface and third party
    plugins. You'll need this guide if you want to:</para>

    <itemizedlist>
      <listitem>
        <para>Create custom site components</para>
      </listitem>

      <listitem>
        <para>Update and improve OTHERobjects itself</para>
      </listitem>
    </itemizedlist>

    <para>If you are just interested in building a standard website then you
    should read the Site Builder Guide instead. If you're not sure then you
    should start off with that simpler guide and come back here when you need
    to.</para>
  </preface>

  <chapter id="chapter-using-the-framework">
    <title>Getting ready</title>

    <para>OTHERobjects in a pure-Java project based on the Spring framework
    and built with Apache Maven. If you are an experienced Java developer you
    will probably have your own preferences for an IDE, build process and app
    server. In this case just skip ahead to the next chapter.</para>

    <para>However, if you're fairly new to Java (or just want a setup that
    will work with the minimum of fuss) then this section will help you get
    your working environment prepared.</para>

    <section>
      <title>Supported platforms</title>

      <para>OTHERobjects should run well on any platform that supports Java
      5.0. This includes Apple Mac OS X 10.4+, Microsoft Windows 2000/XP/Vista
      and most distributions of Linux.</para>

      <para>Although, OTHERobjects runs on Windows it is happiest on UNIX-like
      systems such an Mac OS X and Linux. Windows users may need to install
      Cygwin.</para>
    </section>

    <section id="section-configuring-your-documentation">
      <title>Installing required software</title>

      <para>There is some key software that you will need before you can start
      developing with OTHERobjects.</para>

      <section>
        <title>Java</title>

        <para>You will need a JVM installed and version 5.0 is required. If
        your system does not come with a JVM installed we would recommend the
        latest Sun JDK from java.sun.com/download. Check that your JVM is
        installed:</para>

        <programlisting>brushed:~ rich$ java -version
java version "1.5.0_07" 
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_07-164)
Java HotSpot(TM) Client VM (build 1.5.0_07-87, mixed mode, sharing)
brushed:~ rich$
</programlisting>
      </section>

      <para>TODO Note about system properties. Memory, encoding?</para>

      <section>
        <title>Apache Maven</title>

        <para>Next you'll need Apache Maven version 2.0.7 or greater. You can
        download it from: <uri>http://maven.apache.org/download.html</uri> .
        Once you have downloaded and installed Maven you should make sure that
        the <emphasis role="bold">mvn</emphasis> command is included in your
        path:</para>

        <para>
          <programlisting>brushed:~ rich$ mvn -version 
Maven version: 2.0.7
brushed:~ rich$
</programlisting>
        </para>

        <para>All of the libraries that OTHERobjects depends on are downloaded
        automatically via Maven. Most of these libraries are in the public
        Maven repository but are few are only available from the OTHERobjects
        repository. You will need to add this repository to the Maven
        setting.xml file at <emphasis
        role="bold">~/.m2/settings.xml</emphasis>. If the folder or the file
        does not exist then you should create them manually.</para>

        <note>
          <para>TODO Can we move this information into the pom instead?</para>
        </note>

        <para>Now add the contents below:</para>

        <programlisting>&lt;settings&gt;
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;otherobjects-repository&lt;/id&gt;
      &lt;activation&gt;
        &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
      &lt;/activation&gt;
      &lt;repositories&gt;
        &lt;repository&gt;
          &lt;id&gt;otherobjects&lt;/id&gt;
          &lt;name&gt;OTHERobjects repository&lt;/name&gt;
          &lt;url&gt;http://maven.otherobjects.org/repository/&lt;/url&gt;
          &lt;layout&gt;default&lt;/layout&gt;
        &lt;/repository&gt;
      &lt;/repositories&gt;
      &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
          &lt;id&gt;otherobjects&lt;/id&gt;
          &lt;name&gt;OTHERobjects repository&lt;/name&gt;
          &lt;url&gt;http://maven.otherobjects.org/repository/&lt;/url&gt;
          &lt;layout&gt;default&lt;/layout&gt;
        &lt;/pluginRepository&gt;
        &lt;pluginRepository&gt;
          &lt;id&gt;otherobjects&lt;/id&gt;
          &lt;name&gt;JBoss repository&lt;/name&gt;
          &lt;url&gt;http://repository.jboss.org/maven2/&lt;/url&gt;
          &lt;layout&gt;default&lt;/layout&gt;
        &lt;/pluginRepository&gt;
      &lt;/pluginRepositories&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
&lt;/settings&gt;</programlisting>
      </section>

      <section>
        <title>ImageMagick</title>

        <para>We use ImageMagick for high quality image resizing. You need
        version 6.2 or later. Download a binary package from <uri>
        http://www.imagemagick.org/script/binary-releases.php </uri> and
        install it. You will need to set your paths and environment variables
        correctly. To test that you have the correct version is installed run
        the following command:</para>

        <para>
          <programlisting>brushed:~ rich$ convert -version
Version: ImageMagick 6.3.4 05/19/07 Q16 http://www.imagemagick.org 
Copyright: Copyright (C) 1999-2007 ImageMagick Studio LLC

brushed:~ rich$
</programlisting>
        </para>

        <para>Note for Mac users: the MacPorts install method is usually the
        easiest and best way to go.</para>
      </section>

      <section>
        <title>Eclipse</title>

        <para>Finally, you will need an IDE. We recommend Eclipse 3.3 with the
        WTP (Web Tools Project) extensions, so download <emphasis>Eclipse for
        JEE Developers</emphasis> from
        http://www.eclipse.org/downloads/.</para>

        <para>Once this is installed you should add the following plugins via
        the Update Manager:</para>

        <table>
          <title>Recommended Eclipse plugins</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry align="center">Plugin</entry>

                <entry align="center">Update Site</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Subversive 0.7.1 (Subversion SCM integration) + SKNKit
                1.1 Connector</entry>

                <entry>Part of Ganymede (except connectors)
                http://www.eclipse.org/subversive/documentation/gettingStarted/aboutSubversive/install.php</entry>
              </row>

              <row>
                <entry>M2Eclipse 0.9.2 (Maven integration)</entry>

                <entry>http://m2eclipse.sonatype.org/update/</entry>
              </row>

              <row>
                <entry>run-jetty-run 1.0.1 (Embedded servlet
                container)</entry>

                <entry>http://run-jetty-run.googlecode.com/svn/trunk/updatesite</entry>
              </row>

              <row>
                <entry>SpringIDE 2.0.1 (Spring integration)</entry>

                <entry>http://springide.org/updatesite/</entry>
              </row>

              <row>
                <entry>MoreUnit 0.8.2 (Unit testing utilities)</entry>

                <entry>http://moreunit.sourceforge.net/org.moreunit.updatesite/</entry>
              </row>

              <row>
                <entry>FreeMarker plugin</entry>

                <entry>Need to manually update to plugin to latest FreeMarker
                jar. Also use 0.9x version of freemrker-ide</entry>
              </row>

              <row>
                <entry>CheckStyle</entry>

                <entry />
              </row>

              <row>
                <entry>EclEmma (code coverage)</entry>

                <entry>http://update.eclemma.org/</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>See http://open.ncsu.edu/se/tutorials/install_plugin/ for a
        instructions on installing plugins. There are other plugins that you
        wish to add later but for now these essential ones will do.</para>

        <para>You should now launch Eclipse and check that your plugins are
        installed via the About Eclipse Platform menu option.</para>

        <para>This guide assumes a basic knowledge of Eclipse. A good short
        tutorial on using Eclipse is available at
        http://www.cs.umd.edu/class/fall2004/cmsc131/EclipseTutorial/.</para>
      </section>
    </section>

    <section>
      <title>Checking out the code</title>

      <para>The next step is to check out the source code to OTHERobjects and
      to the sample project that we will use throughout the rest of this
      guide.</para>

      <para>First of all switch to the SVN Repository Exploring and create a
      new Repository Location. OTHERobjects and the sample project are located
      at:</para>

      <programlisting>svn+ssh://svn.otherworks.com/data/svn/repos-ng
</programlisting>

      <para>You will be able to connect anonymously since you will only need
      read-only access to the repository -- NB othermedia users should use
      their normal SVN logins for now.</para>

      <figure>
        <title>Creating a repository location</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/svn-setup.png" scale="50" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>At this stage the projects you will need to checkout are:</para>

      <programlisting>otherobjects/trunk
www.othermedia.com/trunk</programlisting>

      <para>After the checkout the Maven plugin will detect that the projects'
      dependencies and download them. Depending on the speed of your Internet
      connection this mas take a few minutes. Once the download is complete
      you should see these dependencies appear in the Project Explorer.</para>

      <para></para>

      <figure>
        <title>Maven dependencies as they will appear in Eclipse</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/maven-dependencies.png" scale="50" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Now, with the projects checked out make sure that you have no
      build errors and you can move onto the final step. If you do get errors
      then check the Common problems sectsion of this gunide and failing that
      search on the community forums for some help.</para>
    </section>

    <section>
      <title>Running the tests</title>

      <para>The final step of the preparation is to <ulink
      url="http://www.google.com/">make</ulink> sure that the test suite runs
      correctly. This will ensure that you have everything set up properly and
      puts you in a good position to add to the suite as you develop new
      functionality.</para>

      <para>All the tests for the otherobjects project are in src/test/java.
      Select this folder in the Package Explorer and then select Run As...
      JUnit Test. You should also do this for any tests in the sample
      project.</para>
    </section>

    <section>
      <title>Launching the site</title>

      <para>So we are now ready to launch the site. Select the JettyLauncher
      class in src/main/java/org/otherobjects/jetty which is in the sample
      project. To launch in debug mode which in recommended right-click and
      choose Debug As... Java Application.</para>

      <note>
        <para>TODO Information on launching via WTP or custom Jetty plugin
        needed here. How to use -Djava.awt.headless=true. Using -server,
        -Xms256m -Xmx256m. See <link linkend="performance">performance
        tuning</link></para>
      </note>

      <para>The console should show the application starting up (they may be
      some SQL error stack <uri>traces</uri> as the database structure is
      created for the first time but these can be safely ignored). If all has
      gone well you should see a message stating that OTHERobjects is running
      and you will be given the URL to both the site homepage and the
      administration workbench. <emphasis></emphasis><programlisting>**************************************************************
  ___ _____ _   _ _____ ____       _     _           _       
 / _ \_   _| | | | ____|  _ \ ___ | |__ (_) ___  ___| |_ ___ 
| | | || | | |_| |  _| | |_) / _ \| '_ \| |/ _ \/ __| __/ __|
| |_| || | |  _  | |___|  _ &lt; (_) | |_) | |  __/ (__| |_\__ \
 \___/ |_| |_| |_|_____|_| \_\___/|_.__// |\___|\___|\__|___/
                                      |__/                   
                                      
******************* Started up successfully ******************

Site  : http://localhost:8080/go/
Admin : http://localhost:8080/go/workbench/

**************************************************************</programlisting></para>

      <para>Browse around the site and check that it works correctly. To log
      in to the workbench use <emphasis role="bold">admin</emphasis> as the
      username and <emphasis role="bold">admin</emphasis> as the
      password.</para>
    </section>
  </chapter>

  <chapter>
    <title>Creating custom controllers</title>

    <para>Can use standard freemarker system.</para>

    <para>How to return string/binary directly from the controller.</para>

    <para>How to bind to URLS.</para>
  </chapter>

  <chapter>
    <title>Creating services</title>

    <para>Intro</para>

    <para></para>

    <section>
      <title>Handling errors</title>

      <para>Unexpected and unrecoverable errors -- throw uncheched
      exception</para>

      <para>For user recovery throw ServiceException</para>

      <para>Or for complex service throw subclasses of exception that will be
      handled differently be the controller.</para>
    </section>
  </chapter>

  <chapter>
    <title>Architecture</title>

    <para>There are several key OTHERobjects components that it is important
    to undestand before building your own plugins and extensions.</para>

    <section>
      <title>JCR Data Store</title>

      <para>JCR (implemented via Jackrabbit) is a hierarchical tree of nodes
      and properties.</para>

      <para>We map an object to a node and it's fields to properties.</para>

      <para>Object to node mapping done via Jackrabbit OCM.</para>

      <para>OCM configured via our type service annotations.</para>

      <para>DynaNodes are special cases. Custom OCM mapper.</para>
    </section>
  </chapter>

  <chapter id="performance">
    <title>Performance tuning</title>

    <para>http://java.sun.com/performance/reference/whitepapers/tuning.html</para>

    <para>Setting -Xms256m -Xmx256m and -server.</para>

    <para>Using http://www.glassbox.com/glassbox/Project.html</para>

    <para>http://www.ibm.com/developerworks/java/library/j-aopwork10/</para>
  </chapter>

  <chapter>
    <title>Datastores and API</title>

    <para>! Data Interface The heart of any CMS is the datastore. OTHERobjects
    has 3 primary data stores: 1. JCR 2. Database 2. Filesystem There are APIs
    for accessing and working with the data from server side code, but what
    about external systems or from the browser? We provide a simple yet
    powerful REST API for updating, fetching and querying data in any of the
    supported datastores. Remember that the data stored is often part of a
    more complex model so different objects may have more or less than the
    standard methods. FileStore * get * put * delete * list (type? sort?
    paging?) Database * get: type/id * put * delete * list JCR * get: path or
    uuid * put: path * delete * list Need to be able to register custom
    controller logic for model objects Need onChange events </para>
  </chapter>

  <chapter>
    <title>Remote management with JMX</title>

    <para>Much of OTHERobjects can be monitored and controlled remotely via
    JMX (Java Management Extensions). Examples on what can be monitored
    include:</para>

    <itemizedlist>
      <listitem>
        <para>Logging</para>
      </listitem>

      <listitem>
        <para>Current users (TODO)</para>
      </listitem>

      <listitem>
        <para>Scheduler</para>
      </listitem>
    </itemizedlist>

    <para></para>

    <section>
      <title>Enabling JMX</title>

      <para>To allow a management console to connect we first need to enable
      JMX. Add the following to the Java options when starting up
      OTHERobjects:</para>

      <programlisting>-Dcom.sun.management.jmxremote</programlisting>
    </section>

    <section>
      <title>Connect a management console</title>

      <para>Any JMX compliant service should be able to connect to a running
      OTHERobjects instance. The easiest and most widely available one is
      Sun's JConsole what ships with JDK 5.0 and later. To start the console
      put the following command:</para>

      <programlisting>jconsole &amp;</programlisting>

      <para>If the site is running locally then you should see it listed in
      the Connect dialog. For remote sites you will need to do something more
      advanced. TODO Work out what this is!</para>

      <figure>
        <title>JConsole connection dialog</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/jmx-connect-dialog.png" scale="50" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>After connecting you will be able to browse information about the
      running instance:</para>

      <figure>
        <title>JConsole example view</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/jmx-example-window.png" scale="50" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>For more information on usign JConsole see:
      http://java.sun.com/j2se/1.5.0/docs/guide/management/jconsole.html.</para>
    </section>

    <section>
      <title>JMX services</title>

      <para>The following services are JMX enabled:</para>

      <table>
        <title>JMX enabled services</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Service</entry>

              <entry align="center">MBeans</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>Logging</entry>

              <entry>ch.qos.logback.classic:default</entry>
            </row>

            <row>
              <entry>Scheduler</entry>

              <entry>otherobjects:scheduler</entry>
            </row>

            <row>
              <entry></entry>

              <entry></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </chapter>

  <chapter>
    <title>Event handling</title>

    <para>Events that get sent:</para>

    <para>Publsh</para>

    <para>Save</para>

    <para>Can we attach scripts to these events?</para>
  </chapter>

  <chapter>
    <title>Writing Controllers</title>

    <para>Can be annoated or declared in xml.</para>

    <para>Conventions:</para>

    <para>keep method names and mapping similar</para>

    <para>Form handling</para>

    <para></para>
  </chapter>

  <chapter>
    <title>Using Maven</title>

    <para>Maven is the software managment tool we use for OTHERobjects. It
    handles tasks suchas building, testing, packaging and dependecy
    management.</para>

    <section>
      <title>Maven goals</title>

      <table>
        <title>Maven tasks</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry align="center">Command</entry>

              <entry align="center">Task</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>mvn clean</entry>

              <entry>Removes build artifacts</entry>
            </row>

            <row>
              <entry>mvn compile</entry>

              <entry>Compiles project source</entry>
            </row>

            <row>
              <entry>mvn jetty:run</entry>

              <entry>Runs app from source</entry>
            </row>

            <row>
              <entry>mvn jetty:run-war</entry>

              <entry>Builds war and runs from that</entry>
            </row>

            <row>
              <entry>mvn war:war</entry>

              <entry>Builds war (note: must compile first)</entry>
            </row>

            <row>
              <entry>mvn site</entry>

              <entry>Builds docs in target/site. Includes test results and
              coverage.</entry>
            </row>

            <row>
              <entry>mvn hibernate3:hbm2ddl</entry>

              <entry>Generates and executes db schema</entry>
            </row>

            <row>
              <entry>mvn jackrabbit:import</entry>

              <entry>Seeds JCR with default data</entry>
            </row>

            <row>
              <entry>mvn dbunit:operation</entry>

              <entry>Seed database with default data</entry>
            </row>

            <row>
              <entry>mvn surefire-report:report</entry>

              <entry>Runs unit tests and generates test report</entry>
            </row>

            <row>
              <entry>mvn jdocbook:generate</entry>

              <entry>Creates documentation in target/docbook/</entry>
            </row>

            <row>
              <entry>mvn plugin:xdoc</entry>

              <entry>Generates plugin documentation</entry>
            </row>

            <row>
              <entry>mvn javadoc:javadoc</entry>

              <entry>Generates JavaDoc in target/site/apidocs/</entry>
            </row>

            <row>
              <entry>mvn deploy</entry>

              <entry>Deploys jars to repository</entry>
            </row>

            <row>
              <entry>mvn -Dmaven.test.skip=true deploy</entry>

              <entry>Deploys jars to repository (skipping tests</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Deploy settings</title>

      <para>You need to add the following to ~/.m2/settings.xml</para>

      <programlisting>&lt;settings xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;otherobjects-snapshots&lt;/id&gt;
      &lt;username&gt;deploy&lt;/username&gt;
      &lt;password&gt;deploy998&lt;/password&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
&lt;/settings&gt;</programlisting>
    </section>

    <section>
      <title>Useful resources</title>

      <para>Official book: http://www.sonatype.com/book/</para>

      <para>Repository search: http://www.mvnrepository.com/</para>

      <para>Default repository: http://repo1.maven.org/maven2/</para>

      <para>Host your own repository server (or just mirror ours):
      http://www.jfrog.org/sites/artifactory/latest/</para>

      <para>Plugin dev guide:
      http://maven.apache.org/guides/plugin/guide-java-plugin-development.html</para>
    </section>
  </chapter>

  <chapter>
    <title>Using Eclipse</title>

    <para>OTHERobjects was developed using the Eclipse IDE. Other IDEs will
    wokr just fine but Eclipse will be the best supported. This chapter
    describes how to set up Eclipse</para>

    <section>
      <title>Launching with WTP</title>

      <para>WTP allows your webapp to be launched on a variety of servers.
      OTHERobjects has been tested against the follownig:</para>

      <itemizedlist>
        <listitem>
          <para>Jetty</para>
        </listitem>

        <listitem>
          <para>Tomcat</para>
        </listitem>

        <listitem>
          <para>Glassfish v2 (see
          https://glassfishplugins.dev.java.net/eclipse33/index.html)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Optional plugins</title>

      <para>Here are some other Eclipse plugins that you may find useful
      during OTHERobjects development.</para>

      <table>
        <title>Optional Eclipse plugins</title>

        <tgroup cols="1">
          <thead>
            <row>
              <entry align="center">Plugin</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>JCR Browser:
              http://sourceforge.net/projects/jcrbrowser</entry>
            </row>

            <row>
              <entry>Veloeclipse: Velocity editor</entry>
            </row>

            <row>
              <entry>Clover: test coverage tool</entry>
            </row>

            <row>
              <entry>Spket / Aptana: advanced JS editors</entry>
            </row>

            <row>
              <entry>Logback: logger plugin allows linking back to
              code</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>Other tips</title>

      <para>http://www.vasanth.in/2004/01/13/EclipseTipKeepingPluginsAndWorkspaceSeparate.aspx</para>
    </section>
  </chapter>

  <chapter>
    <title>Debugging</title>

    <para>Some info at otherobjects/debug.</para>

    <para>Can run test scripts at otherobjects/debug/script</para>

    <para>Can also telnet in to an interactive Groovy shell on port
    6789.</para>

    <para> Using slf4j not commons-logging (JCL) to avoid the classloader
    nightmares people have reported. Other libs coded against JCL are
    supported via bridgse. Advice is for loggers not to be static.</para>
  </chapter>

  <chapter>
    <title>Using Freemarker</title>

    <para>OTHERobjects uses Freemarker as its preferred Template engine for
    rendering web views as well as templated email bodies.</para>

    <section>
      <title>Configuration</title>

      <para>OTHERobjects configures Freemarker so that it can be used by
      generic text processing code as well as in a web specific context. The
      central configuration happens in
      /otherobjects.resources/config/applicationContext-freemarker.xml like
      this</para>

      <programlisting>&lt;!-- General Freemarker config --&gt;
&lt;bean id="freemarkerConfiguration" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean"&gt;
  &lt;property name="templateLoaderPaths"&gt;
    &lt;list&gt;
      &lt;!-- Site tempates. Path in /webapp --&gt;
      &lt;value&gt;/templates/&lt;/value&gt;
      &lt;!-- OTHERobjects templates loaded from class path --&gt;
      &lt;value&gt;classpath:/otherobjects.resources/templates/&lt;/value&gt;
    &lt;/list&gt;
  &lt;/property&gt;
  &lt;property name="freemarkerVariables"&gt;
    &lt;map&gt;
      &lt;entry key="daoService" value-ref="daoService" /&gt;
   &lt;/map&gt;
  &lt;/property&gt;
&lt;/bean&gt;</programlisting>

      <para>Here the Spring helper class is used to mainly setup all paths
      were templates are expected to live. When you specify freemarker
      template paths they are always relative to the paths configured
      above.</para>

      <para>Because we are using the Spring helper class you have always
      access to Spring's Freemarker macros by putting something like this in
      your template</para>

      <programlisting>&lt;#import "spring.ftl" as spring/&gt;</programlisting>

      <para></para>
    </section>

    <section>
      <title>Advantages</title>

      <para>Here are some advantages Freemarker has over Velocity (in no
      particular order)</para>

      <itemizedlist>
        <listitem>
          <para>Freemarker can preserve whitespace</para>
        </listitem>

        <listitem>
          <para>Freemarker macros have namespaces</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Notes to users of velocity</title>

      <para>Freemarker works very similarly to Velocity but there are some
      differences.</para>

      <orderedlist>
        <listitem>
          <para>You always need to use the explicit syntax - i.e not $var but
          ${var}</para>
        </listitem>

        <listitem>
          <para>Freemarker discourages the use of custom tools for formatting
          strings, numbers and dates. Use the Freemarker builtins
          instead.</para>

          <programlisting>&lt;#-- to trim a string variable --&gt;
${var?trim}

&lt;#-- to display the date part of a date variable --&gt;
${datevar?date}</programlisting>

          <para>See the Freemarker documentation at
          http://freemarker.org/docs/</para>
        </listitem>

        <listitem>
          <para>Everything that gets put into a Freemarker data model is
          wrapped by freemarker which can lead to unexpected results. For
          example, if you put an object that implements java.util.Iterator
          into the data model you can then use Freemarkers &lt;#list&gt; tag
          but you can't get to other methods that object might expose as
          Freemarker wraps Iterator objects in a special Freemarker Collection
          object. There might be other such wrappings that effectively mask
          some things you might want to do with your object.</para>
        </listitem>
      </orderedlist>
    </section>
  </chapter>

  <chapter>
    <title>Testing</title>

    <para>This extends the testing discussion in the Site Designer
    Guide.</para>

    <section>
      <title>Running the tests</title>

      <para>The tests can run either from Maven or within Eclipse. Before the
      tests can run though the database and content repository need to be
      seeded with sample data. This is done via Maven goals
      (hibernate3:hdm2ddl, dbunit:operation, jackrabbit:import2) that are run
      automatically before the main test goal.</para>

      <para>To run the tests via Maven:</para>

      <para><programlisting>mvn clean test site</programlisting> This runs
      three Maven goals that:</para>

      <orderedlist>
        <listitem>
          <para>Cleans out any old compiled classes and sample data</para>
        </listitem>

        <listitem>
          <para>Compiles all the project code, prepares sample data and runs
          the tests</para>
        </listitem>

        <listitem>
          <para>Generates HTML versions of test results and coverage and puts
          them in the target/site directory</para>
        </listitem>
      </orderedlist>

      <para>Once the tests have been run via Maven once the sample data will
      be in place and the tests can then be run as required inside
      Eclipse.</para>
    </section>

    <section>
      <title>Modifing the sample data</title>

      <para>The sample data is stored in a set of XML files inside the
      src/test folder.</para>

      <section>
        <title>Updating JCR data</title>

        <para>The easiest way to do this in to set up and run the otherdemo
        project. Add sample data as required (ideally via setup.script so that
        it can be re-generated easily if the intenal JCR structure is
        changed). The data can then be exported via:</para>

        <para><programlisting>mvn jackrabbit:export2</programlisting>This will
        dump the JCR data into target/jcr-data and this folder can now be
        moved to src/test for use in seeding the tests.</para>
      </section>
    </section>

    <section>
      <title>Writing tests</title>

      <para>http://unitils.sourceforge.net/spring_article.html</para>
    </section>
  </chapter>

  <chapter>
    <title>Writing documentation</title>

    <para>The documentation for OTHERobjects is written in DocBook format and
    processed via JBoss's jdocbook Maven plugin. The design is based on the
    XSL from Hibernate.</para>

    <para>Information on customising DocBook XSL is here:
    <uri>http://www.sagehill.net/docbookxsl/</uri>.</para>

    <para>Documentation stuff do to still:</para>

    <orderedlist>
      <listitem>
        <para>Make figure label font smaller.</para>
      </listitem>

      <listitem>
        <para>Learn how to do links.</para>
      </listitem>

      <listitem>
        <para>Style for suggesting menu commands.</para>
      </listitem>

      <listitem>
        <para>Icons and background for info, warning, important
        paragraphs.</para>
      </listitem>

      <listitem>
        <para>Change colour on internal links</para>
      </listitem>

      <listitem>
        <para>Don't duplicate URL in ulinks</para>
      </listitem>

      <listitem>
        <para>Side bars</para>
      </listitem>
    </orderedlist>

    <para><important>
        <para>Here is a sample important paragraph.</para>
      </important></para>

    <section>
      <title>JavaDoc</title>

      <para>See: http://java.sun.com/j2se/javadoc/writingdoccomments/. The
      style guide is particularly important.</para>
    </section>
  </chapter>

  <chapter>
    <title>Style Guide</title>

    <para>This chapter describes the conventions and styles used when working
    with OTHERobjects.</para>

    <section>
      <title>Java</title>

      <para>Standard advice applies. Link to resoucre? Also see book?</para>

      <para>Exceptions: start curly brace on new line</para>

      <para>An eclipse code formatting preferences file is provided.</para>

      <para>Avoid all standard compiler warnings. Supress warnings only when
      essential and in the smallest scope possible (method not class).</para>

      <para>The default eclipse warnings config should be used.</para>

      <para>Templates are provided for common patterns. Use these whenever
      possible.</para>

      <para>[Check Style IDE format pref files
      http://qalab.sourceforge.net/index.html]</para>
    </section>

    <section>
      <title>Groovy</title>

      <para></para>
    </section>

    <section>
      <title>Javascript</title>

      <para></para>
    </section>

    <section>
      <title>Files on disk</title>

      <para>Always lowercase. Use a hypen (not an underscrore) as a word
      separator.</para>
    </section>

    <section>
      <title>SQL and HQL</title>

      <para>Kewords should be in uppercase. Table and object names in
      lowercase.</para>
    </section>
  </chapter>

  <chapter>
    <title>Common problems</title>

    <para>Here are tips for dealing with the most common problems that users
    experience.</para>

    <orderedlist>
      <listitem>
        <para>Maven dependencies don't appear: plugin / settings.xml /
        connectivity.</para>
      </listitem>
    </orderedlist>
  </chapter>

  <chapter>
    <title>Systems adminstation</title>

    <section>
      <title>Setting environment variables</title>

      <para>On Mac OS X 10.4+ you should edit the .profile file in your home
      folder.</para>

      <programlisting>export PATH=$PATH:/opt/app/bin</programlisting>
    </section>
  </chapter>

  <chapter>
    <title>Using a VCS</title>

    <para>Don't check in:</para>

    <para> web-app/WEB-INF</para>
  </chapter>
</book>